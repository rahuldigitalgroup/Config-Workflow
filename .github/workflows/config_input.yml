name: Configure Validation Parameters

on:
  workflow_dispatch:
    inputs:
      category:
        description: 'Validation Case Category'
        required: true
        type: choice
        options:
          - Basic
          - Extended
      case_name:
        description: 'Validation Case Name (e.g., 2D Mixing Layer)'
        required: true
        type: string
      case_code:
        description: 'Validation Case Code (e.g., 2DML)'
        required: true
        type: string
      # Dynamic inputs will be generated based on config file
      SOLVER:
        description: 'SOLVER'
        required: false
        type: string
        default: 'RANS'
      KIND_TURB_MODEL:
        description: 'KIND_TURB_MODEL'
        required: false
        type: string
        default: 'SA'
      MACH_NUMBER:
        description: 'MACH_NUMBER'
        required: false
        type: string
        default: '0.12'
      AOA:
        description: 'AOA (Angle of Attack)'
        required: false
        type: string
        default: '0'
      FREESTREAM_TEMPERATURE:
        description: 'FREESTREAM_TEMPERATURE'
        required: false
        type: string
        default: '293.0'
      FREESTREAM_PRESSURE:
        description: 'FREESTREAM_PRESSURE'
        required: false
        type: string
        default: '101325'
      CFL_NUMBER:
        description: 'CFL_NUMBER'
        required: false
        type: string
        default: '100.0'
      ITER:
        description: 'ITER (Number of iterations)'
        required: false
        type: string
        default: '100000'
      CONV_RESIDUAL_MINVAL:
        description: 'CONV_RESIDUAL_MINVAL'
        required: false
        type: string
        default: '-8'

jobs:
  update-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SU2 Main Repo
        uses: actions/checkout@v4
        with:
          path: su2-main

      - name: Checkout VandV Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/SU2-VandV
          path: su2-vandv
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Configuration Files
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          CONFIG_PATH="su2-main/VandV/$CATEGORY/$CASE_CODE/config.cfg"
          
          # Create updated config from template
          cp su2-main/template_config.cfg "$CONFIG_PATH"
          
          # Update configuration values based on user inputs
          if [ -n "${{ inputs.SOLVER }}" ]; then
            sed -i "s/^SOLVER=.*/SOLVER= ${{ inputs.SOLVER }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.KIND_TURB_MODEL }}" ]; then
            sed -i "s/^KIND_TURB_MODEL=.*/KIND_TURB_MODEL= ${{ inputs.KIND_TURB_MODEL }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.MACH_NUMBER }}" ]; then
            sed -i "s/^MACH_NUMBER=.*/MACH_NUMBER= ${{ inputs.MACH_NUMBER }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.AOA }}" ]; then
            sed -i "s/^AOA=.*/AOA= ${{ inputs.AOA }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.FREESTREAM_TEMPERATURE }}" ]; then
            sed -i "s/^FREESTREAM_TEMPERATURE=.*/FREESTREAM_TEMPERATURE= ${{ inputs.FREESTREAM_TEMPERATURE }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.FREESTREAM_PRESSURE }}" ]; then
            sed -i "s/^FREESTREAM_PRESSURE=.*/FREESTREAM_PRESSURE= ${{ inputs.FREESTREAM_PRESSURE }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.CFL_NUMBER }}" ]; then
            sed -i "s/^CFL_NUMBER=.*/CFL_NUMBER= ${{ inputs.CFL_NUMBER }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.ITER }}" ]; then
            sed -i "s/^ITER=.*/ITER= ${{ inputs.ITER }}/" "$CONFIG_PATH"
          fi
          if [ -n "${{ inputs.CONV_RESIDUAL_MINVAL }}" ]; then
            sed -i "s/^CONV_RESIDUAL_MINVAL=.*/CONV_RESIDUAL_MINVAL= ${{ inputs.CONV_RESIDUAL_MINVAL }}/" "$CONFIG_PATH"
          fi

      - name: Copy Config to All Mesh Folders
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          MAIN_PATH="su2-main/VandV/$CATEGORY/$CASE_CODE"
          CONFIG_PATH="$MAIN_PATH/config.cfg"
          
          # Copy updated config to all mesh folders
          for mesh_folder in "$MAIN_PATH"/*; do
            if [ -d "$mesh_folder" ] && [ "$(basename "$mesh_folder")" != "." ] && [ "$(basename "$mesh_folder")" != ".." ]; then
              cp "$CONFIG_PATH" "$mesh_folder/"
              echo "Copied config to $(basename "$mesh_folder")"
            fi
          done

      - name: Copy Files from VandV Repo
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          VANDV_PATH="su2-vandv/VandV/$CATEGORY/$CASE_CODE"
          MAIN_PATH="su2-main/VandV/$CATEGORY/$CASE_CODE"
          
          # Copy restart and mesh files from VandV repo to main repo
          for mesh_folder in "$VANDV_PATH"/*; do
            if [ -d "$mesh_folder" ]; then
              folder_name=$(basename "$mesh_folder")
              target_folder="$MAIN_PATH/$folder_name"
              
              if [ -d "$target_folder" ]; then
                echo "Copying files to $target_folder"
                
                # Copy restart file
                if [ -f "$mesh_folder/restart.dat" ]; then
                  cp "$mesh_folder/restart.dat" "$target_folder/"
                fi
                
                # Copy mesh file
                find "$mesh_folder" -name "*.su2" -exec cp {} "$target_folder/" \;
              fi
            fi
          done

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3 python3-pip
          sudo apt-get install -y libopenmpi-dev openmpi-bin
          pip3 install numpy matplotlib pandas

      - name: Build SU2
        run: |
          cd su2-main
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install

      - name: Run Automation Script
        run: |
          cd su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }}
          if [ -f "../../Automation.py" ]; then
            python3 ../../Automation.py
          else
            echo "::warning::Automation.py not found, skipping simulation"
          fi

      - name: Generate Plots
        run: |
          cd su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }}
          if [ -f "Plot.py" ]; then
            python3 Plot.py
          else
            echo "::warning::Plot.py not found, skipping plot generation"
          fi

      - name: Collect Results
        run: |
          mkdir -p results
          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name "*.csv" -exec cp {} results/ \; 2>/dev/null || true
          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name "*.vtu" -exec cp {} results/ \; 2>/dev/null || true
          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name "*.png" -exec cp {} results/ \; 2>/dev/null || true
          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name "*.jpg" -exec cp {} results/ \; 2>/dev/null || true

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: su2-validation-results-${{ inputs.case_code }}
          path: results/

      - name: Deploy to Website Repo
        if: success()
        run: |
          # Clone website repo
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/SU2-Website.git website
          cd website
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create new branch with case name
          BRANCH_NAME="${{ inputs.case_name }}"
          git checkout -b "$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"
          
          # Create folder structure
          mkdir -p "vandv_files/${{ inputs.case_name }}"
          
          # Copy plot files to website repo
          find ../results -name "*.png" -exec cp {} "vandv_files/${{ inputs.case_name }}/" \; 2>/dev/null || true
          find ../results -name "*.jpg" -exec cp {} "vandv_files/${{ inputs.case_name }}/" \; 2>/dev/null || true
          
          # Commit and push if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Add validation results for ${{ inputs.case_name }}"
            git push origin "$BRANCH_NAME"
          else
            echo "No changes to commit"
          fi