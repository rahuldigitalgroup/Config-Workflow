name: SU2 Validation Pipeline

on:
  workflow_dispatch:
    inputs:
      category:
        description: 'Validation Case Category'
        required: true
        type: choice
        options:
          - Basic
          - Extended
      case_name:
        description: 'Validation Case Name (e.g., 2D Mixing Layer)'
        required: true
        type: string
      case_code:
        description: 'Validation Case Code (e.g., 2DML)'
        required: true
        type: string
      turbulence_model:
        description: 'Turbulence Model'
        required: true
        type: choice
        options:
          - SA
          - SST
      configuration:
        description: 'Validation Case Configuration'
        required: true
        type: choice
        options:
          - Configuration1
          - Configuration2
          - All
        default: Configuration1
      author_name:
        description: 'Author Name'
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Main Repo
        uses: actions/checkout@v4
        with:
          path: main-repo

      - name: Checkout VandV Repo
        uses: actions/checkout@v4
        with:
          repository: HarshM0210/VandV
          path: vandv-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout SU2 Official Repo
        uses: actions/checkout@v4
        with:
          repository: su2code/SU2
          path: su2-source

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3 python3-pip
          sudo apt-get install -y libopenmpi-dev openmpi-bin ninja-build
          pip3 install numpy matplotlib pandas meson

      - name: Build SU2
        run: |
          cd su2-source
          python3 -m meson setup build --prefix=/usr/local
          ninja -C build
          sudo ninja -C build install

      - name: Process Configurations
        run: |
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"
          AUTHOR="${{ inputs.author_name }}"
          
          BASE_PATH="main-repo/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"
          VANDV_BASE_PATH="vandv-repo/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"
          
          # Create results directory
          mkdir -p results
          
          if [ "$CONFIG" = "All" ]; then
            # Process all configurations
            ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${AUTHOR}_All"
            mkdir -p "results/$ARTIFACT_NAME"
            
            for config_dir in "$BASE_PATH"/Configuration*; do
              if [ -d "$config_dir" ]; then
                CONFIG_NAME=$(basename "$config_dir")
                echo "Processing $CONFIG_NAME"
                
                # Create config-specific result directory
                mkdir -p "results/$ARTIFACT_NAME/$CONFIG_NAME"
                
                # Process this configuration
                python3 main-repo/ValidationCases/Automation.py \
                  --category "$CATEGORY" \
                  --case-code "$CASE_CODE" \
                  --turbulence-model "$TURB_MODEL" \
                  --configuration "$CONFIG_NAME" \
                  --vandv-path "$VANDV_BASE_PATH" \
                  --main-path "$BASE_PATH" \
                  --output-path "results/$ARTIFACT_NAME/$CONFIG_NAME"
              fi
            done
          else
            # Process specific configuration
            ARTIFACT_NAME="${CATEGORY}_${CASE_CODE}_${TURB_MODEL}_${CONFIG}_${AUTHOR}"
            mkdir -p "results/$ARTIFACT_NAME"
            
            echo "Processing $CONFIG"
            python3 main-repo/ValidationCases/Automation.py \
              --category "$CATEGORY" \
              --case-code "$CASE_CODE" \
              --turbulence-model "$TURB_MODEL" \
              --configuration "$CONFIG" \
              --vandv-path "$VANDV_BASE_PATH" \
              --main-path "$BASE_PATH" \
              --output-path "results/$ARTIFACT_NAME"
          fi

      - name: Upload Results as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.category }}_${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration == 'All' && format('{0}_All', inputs.author_name) || format('{0}_{1}', inputs.configuration, inputs.author_name) }}
          path: results/

      - name: Deploy to Results Website
        if: success()
        run: |
          # Clone results repo
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/HarshM0210/Results.git website
          cd website
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create branch name
          BRANCH_NAME="${{ inputs.case_code }}_${{ inputs.author_name }}"
          git checkout -b "$BRANCH_NAME" 2>/dev/null || git checkout "$BRANCH_NAME"
          
          # Create directory structure
          mkdir -p "vandv_files/${{ inputs.case_code }}"
          
          # Copy plot folders
          if [ "${{ inputs.configuration }}" = "All" ]; then
            # Copy all configuration plot folders
            find ../results -name "plots" -type d | while read plot_dir; do
              config_name=$(basename $(dirname "$plot_dir"))
              target_dir="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${config_name}"
              rm -rf "$target_dir"
              cp -r "$plot_dir" "$target_dir"
            done
          else
            # Copy single configuration plot folder
            target_dir="vandv_files/${{ inputs.case_code }}/${{ inputs.case_code }}_${{ inputs.turbulence_model }}_${{ inputs.configuration }}"
            rm -rf "$target_dir"
            
            # Find plots directory in results
            PLOTS_DIR=$(find ../results -name "plots" -type d | head -1)
            if [ -n "$PLOTS_DIR" ] && [ -d "$PLOTS_DIR" ]; then
              cp -r "$PLOTS_DIR" "$target_dir"
              echo "Copied plots from $PLOTS_DIR to $target_dir"
            else
              echo "No plots directory found in results"
              # Create empty target directory to ensure branch creation
              mkdir -p "$target_dir"
              echo "No plots available" > "$target_dir/README.txt"
            fi
          fi
          
          # Commit and push if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update validation results for ${{ inputs.case_code }} by ${{ inputs.author_name }}"
            git push origin "$BRANCH_NAME"
          else
            echo "No changes to commit"
          fi

      - name: Generate Combined Plots
        if: success()
        run: |
          # Generate combined plots if multiple configurations exist
          cd website/vandv_files/${{ inputs.case_code }}
          if [ $(ls -1 | wc -l) -gt 1 ]; then
            python3 ../../../main-repo/generate_combined_plots.py \
              --case-code "${{ inputs.case_code }}" \
              --input-dir "." \
              --output-dir "combined_plots"
            
            git add .
            git commit -m "Add combined plots for ${{ inputs.case_code }}" || true
            git push origin "${{ inputs.case_code }}_${{ inputs.author_name }}" || true
          fi

      - name: Cleanup
        if: always()
        run: |
          # Clean up mesh folders in main repo
          CATEGORY="${{ inputs.category }}"
          CASE_CODE="${{ inputs.case_code }}"
          TURB_MODEL="${{ inputs.turbulence_model }}"
          CONFIG="${{ inputs.configuration }}"
          
          BASE_PATH="main-repo/ValidationCases/$CATEGORY/$CASE_CODE/$TURB_MODEL"
          
          if [ "$CONFIG" = "All" ]; then
            for config_dir in "$BASE_PATH"/Configuration*; do
              if [ -d "$config_dir" ]; then
                find "$config_dir" -name "*.csv" -delete 2>/dev/null || true
                find "$config_dir" -name "*.vtu" -delete 2>/dev/null || true
                find "$config_dir" -name "*.dat" -delete 2>/dev/null || true
                find "$config_dir" -name "*.su2" -delete 2>/dev/null || true
                find "$config_dir" -name "Config.cfg" -delete 2>/dev/null || true
              fi
            done
          else
            CONFIG_PATH="$BASE_PATH/$CONFIG"
            if [ -d "$CONFIG_PATH" ]; then
              find "$CONFIG_PATH" -name "*.csv" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.vtu" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.dat" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "*.su2" -delete 2>/dev/null || true
              find "$CONFIG_PATH" -name "Config.cfg" -delete 2>/dev/null || true
            fi
          fi
          
          echo "Cleanup completed - mesh folders restored to original state"

      - name: Summary
        run: |
          echo "✅ SU2 Validation Pipeline completed successfully!"
          echo "📊 Case: ${{ inputs.category }}/${{ inputs.case_code }} - ${{ inputs.case_name }}"
          echo "🔧 Configuration: ${{ inputs.turbulence_model }}/${{ inputs.configuration }}"
          echo "👤 Author: ${{ inputs.author_name }}"
          echo "🌐 Results deployed to: ${{ inputs.case_code }}_${{ inputs.author_name }} branch"