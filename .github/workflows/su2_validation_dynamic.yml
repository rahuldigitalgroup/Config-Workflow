name: SU2 Validation Pipeline - Dynamic
'on':
  workflow_dispatch:
    inputs:
      category:
        description: Validation Case Category
        required: true
        type: choice
        options:
        - Basic
        - Extended
      case_name:
        description: Validation Case Name (e.g., 2D Mixing Layer)
        required: true
        type: string
      case_code:
        description: Validation Case Code (e.g., 2DML)
        required: true
        type: string
      SOLVER:
        description: SOLVER
        required: false
        type: string
        default: RANS
      KIND_TURB_MODEL:
        description: KIND_TURB_MODEL
        required: false
        type: string
        default: SA
      SA_OPTIONS:
        description: SA_OPTIONS
        required: false
        type: string
        default: NONE
      REF_DIMENSIONALIZATION:
        description: REF_DIMENSIONALIZATION
        required: false
        type: string
        default: DIMENSIONAL
      MACH_NUMBER:
        description: MACH_NUMBER
        required: false
        type: string
        default: '0.12'
      AOA:
        description: AOA
        required: false
        type: string
        default: '0'
      SIDESLIP_ANGLE:
        description: SIDESLIP_ANGLE
        required: false
        type: string
        default: '0.0'
      INIT_OPTION:
        description: INIT_OPTION
        required: false
        type: string
        default: TD_CONDITIONS
      FREESTREAM_OPTION:
        description: FREESTREAM_OPTION
        required: false
        type: string
        default: TEMPERATURE_FS
      FREESTREAM_TEMPERATURE:
        description: FREESTREAM_TEMPERATURE
        required: false
        type: string
        default: '293.0'
      FREESTREAM_PRESSURE:
        description: FREESTREAM_PRESSURE
        required: false
        type: string
        default: '101325'
      REYNOLDS_LENGTH:
        description: REYNOLDS_LENGTH
        required: false
        type: string
        default: '1.0'
      REF_AREA:
        description: REF_AREA
        required: false
        type: string
        default: '1.0'
      REF_LENGTH:
        description: REF_LENGTH
        required: false
        type: string
        default: '1.0'
      REF_ORIGIN_MOMENT_X:
        description: REF_ORIGIN_MOMENT_X
        required: false
        type: string
        default: '0.0'
      REF_ORIGIN_MOMENT_Y:
        description: REF_ORIGIN_MOMENT_Y
        required: false
        type: string
        default: '0.0'
      REF_ORIGIN_MOMENT_Z:
        description: REF_ORIGIN_MOMENT_Z
        required: false
        type: string
        default: '0.0'
      MARKER_SYM:
        description: MARKER_SYM
        required: false
        type: string
        default: ( SymmetryLower, SymmetryUpper )
      MARKER_INLET:
        description: MARKER_INLET
        required: false
        type: string
        default: ( InletLower, 293.24905, 101627.96175, 1.0, 0.0, 0.0, InletUpper, 293.85849, 102369.66, 1.0, 0.0, 0.0 )
      MARKER_OUTLET:
        description: MARKER_OUTLET
        required: false
        type: string
        default: ( Outlet, 101325 )
      MARKER_HEATFLUX:
        description: MARKER_HEATFLUX
        required: false
        type: string
        default: ( WallLower, 0.0, WallTip, 0.0, WallUpper, 0.0 )
      MARKER_PLOTTING:
        description: MARKER_PLOTTING
        required: false
        type: string
        default: ( WallLower, WallTip, WallUpper )
      MARKER_MONITORING:
        description: MARKER_MONITORING
        required: false
        type: string
        default: ( WallLower, WallTip, WallUpper )
      FLUID_MODEL:
        description: FLUID_MODEL
        required: false
        type: string
        default: STANDARD_AIR
      GAMMA_VALUE:
        description: GAMMA_VALUE
        required: false
        type: string
        default: '1.4'
      GAS_CONSTANT:
        description: GAS_CONSTANT
        required: false
        type: string
        default: '287.05'
      VISCOSITY_MODEL:
        description: VISCOSITY_MODEL
        required: false
        type: string
        default: SUTHERLAND
      MU_REF:
        description: MU_REF
        required: false
        type: string
        default: '1.716E-5'
      MU_T_REF:
        description: MU_T_REF
        required: false
        type: string
        default: '273.15'
      SUTHERLAND_CONSTANT:
        description: SUTHERLAND_CONSTANT
        required: false
        type: string
        default: '110.4'
      CONDUCTIVITY_MODEL:
        description: CONDUCTIVITY_MODEL
        required: false
        type: string
        default: CONSTANT_PRANDTL
      PRANDTL_LAM:
        description: PRANDTL_LAM
        required: false
        type: string
        default: '0.72'
      PRANDTL_TURB:
        description: PRANDTL_TURB
        required: false
        type: string
        default: '0.90'
      NUM_METHOD_GRAD:
        description: NUM_METHOD_GRAD
        required: false
        type: string
        default: WEIGHTED_LEAST_SQUARES
      CFL_NUMBER:
        description: CFL_NUMBER
        required: false
        type: string
        default: '100.0'
      CFL_ADAPT:
        description: CFL_ADAPT
        required: false
        type: string
        default: 'NO'
      CFL_ADAPT_PARAM:
        description: CFL_ADAPT_PARAM
        required: false
        type: string
        default: ( 1.5, 0.5, 1.0, 100.0 )
      ITER:
        description: ITER
        required: false
        type: string
        default: '100000'
      LINEAR_SOLVER:
        description: LINEAR_SOLVER
        required: false
        type: string
        default: FGMRES
      LINEAR_SOLVER_ERROR:
        description: LINEAR_SOLVER_ERROR
        required: false
        type: string
        default: 1E-4
      LINEAR_SOLVER_ITER:
        description: LINEAR_SOLVER_ITER
        required: false
        type: string
        default: '2'
      CONV_NUM_METHOD_FLOW:
        description: CONV_NUM_METHOD_FLOW
        required: false
        type: string
        default: ROE
      MUSCL_FLOW:
        description: MUSCL_FLOW
        required: false
        type: string
        default: 'NO'
      SLOPE_LIMITER_FLOW:
        description: SLOPE_LIMITER_FLOW
        required: false
        type: string
        default: NONE
      VENKAT_LIMITER_COEFF:
        description: VENKAT_LIMITER_COEFF
        required: false
        type: string
        default: '0.03'
      JST_SENSOR_COEFF:
        description: JST_SENSOR_COEFF
        required: false
        type: string
        default: ( 0.5, 0.02 )
      TIME_DISCRE_FLOW:
        description: TIME_DISCRE_FLOW
        required: false
        type: string
        default: EULER_IMPLICIT
      CONV_NUM_METHOD_TURB:
        description: CONV_NUM_METHOD_TURB
        required: false
        type: string
        default: SCALAR_UPWIND
      MUSCL_TURB:
        description: MUSCL_TURB
        required: false
        type: string
        default: 'NO'
      SLOPE_LIMITER_TURB:
        description: SLOPE_LIMITER_TURB
        required: false
        type: string
        default: VENKATAKRISHNAN_WANG
      TIME_DISCRE_TURB:
        description: TIME_DISCRE_TURB
        required: false
        type: string
        default: EULER_IMPLICIT
      CFL_REDUCTION_TURB:
        description: CFL_REDUCTION_TURB
        required: false
        type: string
        default: '1.0'
      CONV_RESIDUAL_MINVAL:
        description: CONV_RESIDUAL_MINVAL
        required: false
        type: string
        default: '-8'
      CONV_STARTITER:
        description: CONV_STARTITER
        required: false
        type: string
        default: '10'
      CONV_CAUCHY_ELEMS:
        description: CONV_CAUCHY_ELEMS
        required: false
        type: string
        default: '100'
      CONV_CAUCHY_EPS:
        description: CONV_CAUCHY_EPS
        required: false
        type: string
        default: 1E-6
      MESH_FILENAME:
        description: MESH_FILENAME
        required: false
        type: string
        default: 047.su2
      MESH_FORMAT:
        description: MESH_FORMAT
        required: false
        type: string
        default: SU2
      SOLUTION_FILENAME:
        description: SOLUTION_FILENAME
        required: false
        type: string
        default: restart.dat
      OUTPUT_WRT_FREQ:
        description: OUTPUT_WRT_FREQ
        required: false
        type: string
        default: '500'
      SCREEN_WRT_FREQ_INNER:
        description: SCREEN_WRT_FREQ_INNER
        required: false
        type: string
        default: '1'
      HISTORY_OUTPUT:
        description: HISTORY_OUTPUT
        required: false
        type: string
        default: ( ITER, RMS_RES, AERO_COEFF )
      SCREEN_OUTPUT:
        description: SCREEN_OUTPUT
        required: false
        type: string
        default: ( INNER_ITER, RMS_RES, FORCE_X, FORCE_Y, FORCE_Z )
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout SU2 Main Repo
      uses: actions/checkout@v4
      with:
        path: su2-main
    - name: Checkout VandV Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/SU2-VandV
        path: su2-vandv
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Update Configuration Files
      run: "CATEGORY=\"${ inputs.category }\"\n          CASE_CODE=\"${ inputs.case_code }\"\n          CONFIG_PATH=\"su2-main/VandV/$CATEGORY/$CASE_CODE/config.cfg\"\n          \n          # Create updated config from template\n          cp su2-main/template_config.cfg \"$CONFIG_PATH\"\n          \n          # Update configuration values based on user inputs\n          if [ -n \"${{ inputs.SOLVER }}\" ]; then\n            sed -i \"s/^SOLVER=.*/SOLVER= ${{ inputs.SOLVER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.KIND_TURB_MODEL }}\" ]; then\n            sed -i \"s/^KIND_TURB_MODEL=.*/KIND_TURB_MODEL= ${{ inputs.KIND_TURB_MODEL }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SA_OPTIONS }}\" ]; then\n            sed -i \"s/^SA_OPTIONS=.*/SA_OPTIONS= ${{ inputs.SA_OPTIONS }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_DIMENSIONALIZATION }}\" ]; then\n            sed -i \"s/^REF_DIMENSIONALIZATION=.*/REF_DIMENSIONALIZATION=\
        \ ${{ inputs.REF_DIMENSIONALIZATION }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MACH_NUMBER }}\" ]; then\n            sed -i \"s/^MACH_NUMBER=.*/MACH_NUMBER= ${{ inputs.MACH_NUMBER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.AOA }}\" ]; then\n            sed -i \"s/^AOA=.*/AOA= ${{ inputs.AOA }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SIDESLIP_ANGLE }}\" ]; then\n            sed -i \"s/^SIDESLIP_ANGLE=.*/SIDESLIP_ANGLE= ${{ inputs.SIDESLIP_ANGLE }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.INIT_OPTION }}\" ]; then\n            sed -i \"s/^INIT_OPTION=.*/INIT_OPTION= ${{ inputs.INIT_OPTION }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.FREESTREAM_OPTION }}\" ]; then\n            sed -i \"s/^FREESTREAM_OPTION=.*/FREESTREAM_OPTION= ${{ inputs.FREESTREAM_OPTION }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.FREESTREAM_TEMPERATURE }}\" ]; then\n\
        \            sed -i \"s/^FREESTREAM_TEMPERATURE=.*/FREESTREAM_TEMPERATURE= ${{ inputs.FREESTREAM_TEMPERATURE }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.FREESTREAM_PRESSURE }}\" ]; then\n            sed -i \"s/^FREESTREAM_PRESSURE=.*/FREESTREAM_PRESSURE= ${{ inputs.FREESTREAM_PRESSURE }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REYNOLDS_LENGTH }}\" ]; then\n            sed -i \"s/^REYNOLDS_LENGTH=.*/REYNOLDS_LENGTH= ${{ inputs.REYNOLDS_LENGTH }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_AREA }}\" ]; then\n            sed -i \"s/^REF_AREA=.*/REF_AREA= ${{ inputs.REF_AREA }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_LENGTH }}\" ]; then\n            sed -i \"s/^REF_LENGTH=.*/REF_LENGTH= ${{ inputs.REF_LENGTH }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_ORIGIN_MOMENT_X }}\" ]; then\n            sed -i \"s/^REF_ORIGIN_MOMENT_X=.*/REF_ORIGIN_MOMENT_X= ${{\
        \ inputs.REF_ORIGIN_MOMENT_X }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_ORIGIN_MOMENT_Y }}\" ]; then\n            sed -i \"s/^REF_ORIGIN_MOMENT_Y=.*/REF_ORIGIN_MOMENT_Y= ${{ inputs.REF_ORIGIN_MOMENT_Y }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.REF_ORIGIN_MOMENT_Z }}\" ]; then\n            sed -i \"s/^REF_ORIGIN_MOMENT_Z=.*/REF_ORIGIN_MOMENT_Z= ${{ inputs.REF_ORIGIN_MOMENT_Z }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MARKER_SYM }}\" ]; then\n            sed -i \"s/^MARKER_SYM=.*/MARKER_SYM= ${{ inputs.MARKER_SYM }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MARKER_INLET }}\" ]; then\n            sed -i \"s/^MARKER_INLET=.*/MARKER_INLET= ${{ inputs.MARKER_INLET }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MARKER_OUTLET }}\" ]; then\n            sed -i \"s/^MARKER_OUTLET=.*/MARKER_OUTLET= ${{ inputs.MARKER_OUTLET }}/\" \"$CONFIG_PATH\"\n          fi\n    \
        \      if [ -n \"${{ inputs.MARKER_HEATFLUX }}\" ]; then\n            sed -i \"s/^MARKER_HEATFLUX=.*/MARKER_HEATFLUX= ${{ inputs.MARKER_HEATFLUX }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MARKER_PLOTTING }}\" ]; then\n            sed -i \"s/^MARKER_PLOTTING=.*/MARKER_PLOTTING= ${{ inputs.MARKER_PLOTTING }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MARKER_MONITORING }}\" ]; then\n            sed -i \"s/^MARKER_MONITORING=.*/MARKER_MONITORING= ${{ inputs.MARKER_MONITORING }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.FLUID_MODEL }}\" ]; then\n            sed -i \"s/^FLUID_MODEL=.*/FLUID_MODEL= ${{ inputs.FLUID_MODEL }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.GAMMA_VALUE }}\" ]; then\n            sed -i \"s/^GAMMA_VALUE=.*/GAMMA_VALUE= ${{ inputs.GAMMA_VALUE }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.GAS_CONSTANT }}\" ]; then\n            sed -i \"s/^GAS_CONSTANT=.*/GAS_CONSTANT=\
        \ ${{ inputs.GAS_CONSTANT }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.VISCOSITY_MODEL }}\" ]; then\n            sed -i \"s/^VISCOSITY_MODEL=.*/VISCOSITY_MODEL= ${{ inputs.VISCOSITY_MODEL }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MU_REF }}\" ]; then\n            sed -i \"s/^MU_REF=.*/MU_REF= ${{ inputs.MU_REF }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MU_T_REF }}\" ]; then\n            sed -i \"s/^MU_T_REF=.*/MU_T_REF= ${{ inputs.MU_T_REF }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SUTHERLAND_CONSTANT }}\" ]; then\n            sed -i \"s/^SUTHERLAND_CONSTANT=.*/SUTHERLAND_CONSTANT= ${{ inputs.SUTHERLAND_CONSTANT }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONDUCTIVITY_MODEL }}\" ]; then\n            sed -i \"s/^CONDUCTIVITY_MODEL=.*/CONDUCTIVITY_MODEL= ${{ inputs.CONDUCTIVITY_MODEL }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.PRANDTL_LAM\
        \ }}\" ]; then\n            sed -i \"s/^PRANDTL_LAM=.*/PRANDTL_LAM= ${{ inputs.PRANDTL_LAM }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.PRANDTL_TURB }}\" ]; then\n            sed -i \"s/^PRANDTL_TURB=.*/PRANDTL_TURB= ${{ inputs.PRANDTL_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.NUM_METHOD_GRAD }}\" ]; then\n            sed -i \"s/^NUM_METHOD_GRAD=.*/NUM_METHOD_GRAD= ${{ inputs.NUM_METHOD_GRAD }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CFL_NUMBER }}\" ]; then\n            sed -i \"s/^CFL_NUMBER=.*/CFL_NUMBER= ${{ inputs.CFL_NUMBER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CFL_ADAPT }}\" ]; then\n            sed -i \"s/^CFL_ADAPT=.*/CFL_ADAPT= ${{ inputs.CFL_ADAPT }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CFL_ADAPT_PARAM }}\" ]; then\n            sed -i \"s/^CFL_ADAPT_PARAM=.*/CFL_ADAPT_PARAM= ${{ inputs.CFL_ADAPT_PARAM }}/\" \"$CONFIG_PATH\"\n    \
        \      fi\n          if [ -n \"${{ inputs.ITER }}\" ]; then\n            sed -i \"s/^ITER=.*/ITER= ${{ inputs.ITER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.LINEAR_SOLVER }}\" ]; then\n            sed -i \"s/^LINEAR_SOLVER=.*/LINEAR_SOLVER= ${{ inputs.LINEAR_SOLVER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.LINEAR_SOLVER_ERROR }}\" ]; then\n            sed -i \"s/^LINEAR_SOLVER_ERROR=.*/LINEAR_SOLVER_ERROR= ${{ inputs.LINEAR_SOLVER_ERROR }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.LINEAR_SOLVER_ITER }}\" ]; then\n            sed -i \"s/^LINEAR_SOLVER_ITER=.*/LINEAR_SOLVER_ITER= ${{ inputs.LINEAR_SOLVER_ITER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_NUM_METHOD_FLOW }}\" ]; then\n            sed -i \"s/^CONV_NUM_METHOD_FLOW=.*/CONV_NUM_METHOD_FLOW= ${{ inputs.CONV_NUM_METHOD_FLOW }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MUSCL_FLOW }}\" ]; then\n\
        \            sed -i \"s/^MUSCL_FLOW=.*/MUSCL_FLOW= ${{ inputs.MUSCL_FLOW }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SLOPE_LIMITER_FLOW }}\" ]; then\n            sed -i \"s/^SLOPE_LIMITER_FLOW=.*/SLOPE_LIMITER_FLOW= ${{ inputs.SLOPE_LIMITER_FLOW }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.VENKAT_LIMITER_COEFF }}\" ]; then\n            sed -i \"s/^VENKAT_LIMITER_COEFF=.*/VENKAT_LIMITER_COEFF= ${{ inputs.VENKAT_LIMITER_COEFF }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.JST_SENSOR_COEFF }}\" ]; then\n            sed -i \"s/^JST_SENSOR_COEFF=.*/JST_SENSOR_COEFF= ${{ inputs.JST_SENSOR_COEFF }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.TIME_DISCRE_FLOW }}\" ]; then\n            sed -i \"s/^TIME_DISCRE_FLOW=.*/TIME_DISCRE_FLOW= ${{ inputs.TIME_DISCRE_FLOW }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_NUM_METHOD_TURB }}\" ]; then\n            sed -i \"s/^CONV_NUM_METHOD_TURB=.*/CONV_NUM_METHOD_TURB=\
        \ ${{ inputs.CONV_NUM_METHOD_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MUSCL_TURB }}\" ]; then\n            sed -i \"s/^MUSCL_TURB=.*/MUSCL_TURB= ${{ inputs.MUSCL_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SLOPE_LIMITER_TURB }}\" ]; then\n            sed -i \"s/^SLOPE_LIMITER_TURB=.*/SLOPE_LIMITER_TURB= ${{ inputs.SLOPE_LIMITER_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.TIME_DISCRE_TURB }}\" ]; then\n            sed -i \"s/^TIME_DISCRE_TURB=.*/TIME_DISCRE_TURB= ${{ inputs.TIME_DISCRE_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CFL_REDUCTION_TURB }}\" ]; then\n            sed -i \"s/^CFL_REDUCTION_TURB=.*/CFL_REDUCTION_TURB= ${{ inputs.CFL_REDUCTION_TURB }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_RESIDUAL_MINVAL }}\" ]; then\n            sed -i \"s/^CONV_RESIDUAL_MINVAL=.*/CONV_RESIDUAL_MINVAL= ${{ inputs.CONV_RESIDUAL_MINVAL }}/\"\
        \ \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_STARTITER }}\" ]; then\n            sed -i \"s/^CONV_STARTITER=.*/CONV_STARTITER= ${{ inputs.CONV_STARTITER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_CAUCHY_ELEMS }}\" ]; then\n            sed -i \"s/^CONV_CAUCHY_ELEMS=.*/CONV_CAUCHY_ELEMS= ${{ inputs.CONV_CAUCHY_ELEMS }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.CONV_CAUCHY_EPS }}\" ]; then\n            sed -i \"s/^CONV_CAUCHY_EPS=.*/CONV_CAUCHY_EPS= ${{ inputs.CONV_CAUCHY_EPS }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MESH_FILENAME }}\" ]; then\n            sed -i \"s/^MESH_FILENAME=.*/MESH_FILENAME= ${{ inputs.MESH_FILENAME }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.MESH_FORMAT }}\" ]; then\n            sed -i \"s/^MESH_FORMAT=.*/MESH_FORMAT= ${{ inputs.MESH_FORMAT }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SOLUTION_FILENAME }}\"\
        \ ]; then\n            sed -i \"s/^SOLUTION_FILENAME=.*/SOLUTION_FILENAME= ${{ inputs.SOLUTION_FILENAME }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.OUTPUT_WRT_FREQ }}\" ]; then\n            sed -i \"s/^OUTPUT_WRT_FREQ=.*/OUTPUT_WRT_FREQ= ${{ inputs.OUTPUT_WRT_FREQ }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SCREEN_WRT_FREQ_INNER }}\" ]; then\n            sed -i \"s/^SCREEN_WRT_FREQ_INNER=.*/SCREEN_WRT_FREQ_INNER= ${{ inputs.SCREEN_WRT_FREQ_INNER }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.HISTORY_OUTPUT }}\" ]; then\n            sed -i \"s/^HISTORY_OUTPUT=.*/HISTORY_OUTPUT= ${{ inputs.HISTORY_OUTPUT }}/\" \"$CONFIG_PATH\"\n          fi\n          if [ -n \"${{ inputs.SCREEN_OUTPUT }}\" ]; then\n            sed -i \"s/^SCREEN_OUTPUT=.*/SCREEN_OUTPUT= ${{ inputs.SCREEN_OUTPUT }}/\" \"$CONFIG_PATH\"\n          fi"
    - name: Copy Config to All Mesh Folders
      run: "CATEGORY=\"${{ inputs.category }}\"\n          CASE_CODE=\"${{ inputs.case_code }}\"\n          MAIN_PATH=\"su2-main/VandV/$CATEGORY/$CASE_CODE\"\n          CONFIG_PATH=\"$MAIN_PATH/config.cfg\"\n          \n          # Copy updated config to all mesh folders\n          for mesh_folder in \"$MAIN_PATH\"/*; do\n            if [ -d \"$mesh_folder\" ] && [ \"$(basename \"$mesh_folder\")\" != \".\" ] && [ \"$(basename \"$mesh_folder\")\" != \"..\" ]; then\n              cp \"$CONFIG_PATH\" \"$mesh_folder/\"\n              echo \"Copied config to $(basename \"$mesh_folder\")\"\n            fi\n          done"
    - name: Copy Files from VandV Repo
      run: "CATEGORY=\"${{ inputs.category }}\"\n          CASE_CODE=\"${{ inputs.case_code }}\"\n          VANDV_PATH=\"su2-vandv/VandV/$CATEGORY/$CASE_CODE\"\n          MAIN_PATH=\"su2-main/VandV/$CATEGORY/$CASE_CODE\"\n          \n          # Copy restart and mesh files from VandV repo to main repo\n          for mesh_folder in \"$VANDV_PATH\"/*; do\n            if [ -d \"$mesh_folder\" ]; then\n              folder_name=$(basename \"$mesh_folder\")\n              target_folder=\"$MAIN_PATH/$folder_name\"\n              \n              if [ -d \"$target_folder\" ]; then\n                echo \"Copying files to $target_folder\"\n                \n                # Copy restart file\n                if [ -f \"$mesh_folder/restart.dat\" ]; then\n                  cp \"$mesh_folder/restart.dat\" \"$target_folder/\"\n                fi\n                \n                # Copy mesh file\n                find \"$mesh_folder\" -name \"*.su2\" -exec cp {} \"$target_folder/\" \\;\n           \
        \   fi\n            fi\n          done"
    - name: Install Dependencies
      run: "sudo apt-get update\n          sudo apt-get install -y build-essential cmake python3 python3-pip\n          sudo apt-get install -y libopenmpi-dev openmpi-bin\n          pip3 install numpy matplotlib pandas"
    - name: Build SU2
      run: "cd su2-main\n          mkdir -p build\n          cd build\n          cmake .. -DCMAKE_BUILD_TYPE=Release\n          make -j$(nproc)\n          sudo make install"
    - name: Run Automation Script
      run: "cd su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }}\n          if [ -f \"../../Automation.py\" ]; then\n            python3 ../../Automation.py\n          else\n            echo \"::warning::Automation.py not found, skipping simulation\"\n          fi"
    - name: Generate Plots
      run: "cd su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }}\n          if [ -f \"Plot.py\" ]; then\n            python3 Plot.py\n          else\n            echo \"::warning::Plot.py not found, skipping plot generation\"\n          fi"
    - name: Collect Results
      run: "mkdir -p results\n          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name \"*.csv\" -exec cp {} results/ \\; 2>/dev/null || true\n          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name \"*.vtu\" -exec cp {} results/ \\; 2>/dev/null || true\n          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name \"*.png\" -exec cp {} results/ \\; 2>/dev/null || true\n          find su2-main/VandV/${{ inputs.category }}/${{ inputs.case_code }} -name \"*.jpg\" -exec cp {} results/ \\; 2>/dev/null || true"
    - name: Upload Results as Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: su2-validation-results-${{ inputs.case_code }}
        path: results/
    - name: Deploy to Website Repo
      if: success()
      run: "# Clone website repo\n          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/SU2-Website.git website\n          cd website\n          \n          git config user.name \"GitHub Actions\"\n          git config user.email \"actions@github.com\"\n          \n          # Create new branch with case name\n          BRANCH_NAME=\"${{ inputs.case_name }}\"\n          git checkout -b \"$BRANCH_NAME\" 2>/dev/null || git checkout \"$BRANCH_NAME\"\n          \n          # Create folder structure\n          mkdir -p \"vandv_files/${{ inputs.case_name }}\"\n          \n          # Copy plot files to website repo\n          find ../results -name \"*.png\" -exec cp {} \"vandv_files/${{ inputs.case_name }}/\" \\; 2>/dev/null || true\n          find ../results -name \"*.jpg\" -exec cp {} \"vandv_files/${{ inputs.case_name }}/\" \\; 2>/dev/null || true\n          \n          # Commit and push if there are changes\n          if [ -n \"$(git status --porcelain)\"\
        \ ]; then\n            git add .\n            git commit -m \"Add validation results for ${{ inputs.case_name }}\"\n            git push origin \"$BRANCH_NAME\"\n          else\n            echo \"No changes to commit\"\n          fi"
